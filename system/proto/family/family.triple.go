// Code generated by protoc-gen-triple. DO NOT EDIT.
//
// Source: family.proto
package family

import (
	"context"
)

import (
	"dubbo.apache.org/dubbo-go/v3"
	"dubbo.apache.org/dubbo-go/v3/client"
	"dubbo.apache.org/dubbo-go/v3/common"
	"dubbo.apache.org/dubbo-go/v3/common/constant"
	"dubbo.apache.org/dubbo-go/v3/protocol/triple/triple_protocol"
	"dubbo.apache.org/dubbo-go/v3/server"
)

// This is a compile-time assertion to ensure that this generated file and the Triple package
// are compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of Triple newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of Triple or updating the Triple
// version compiled into your binary.
const _ = triple_protocol.IsAtLeastVersion0_1_0

const (
	// sayHalloName is the fully-qualified name of the sayHallo service.
	sayHalloName = "family.sayHallo"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// sayHalloGreetProcedure is the fully-qualified name of the sayHallo's Greet RPC.
	sayHalloGreetProcedure = "/family.sayHallo/Greet"
)

var (
	_ sayHallo = (*sayHalloImpl)(nil)
)

// sayHallo is a client for the family.sayHallo service.
type sayHallo interface {
	Greet(ctx context.Context, req *GreetRequest, opts ...client.CallOption) (*GreetResponse, error)
}

// NewsayHallo constructs a client for the family.sayHallo service.
func NewsayHallo(cli *client.Client, opts ...client.ReferenceOption) (sayHallo, error) {
	conn, err := cli.DialWithInfo("family.sayHallo", &sayHallo_ClientInfo, opts...)
	if err != nil {
		return nil, err
	}
	return &sayHalloImpl{
		conn: conn,
	}, nil
}

func SetConsumersayHallo(srv common.RPCService) {
	dubbo.SetConsumerServiceWithInfo(srv, &sayHallo_ClientInfo)
}

// sayHalloImpl implements sayHallo.
type sayHalloImpl struct {
	conn *client.Connection
}

func (c *sayHalloImpl) Greet(ctx context.Context, req *GreetRequest, opts ...client.CallOption) (*GreetResponse, error) {
	resp := new(GreetResponse)
	if err := c.conn.CallUnary(ctx, []interface{}{req}, resp, "Greet", opts...); err != nil {
		return nil, err
	}
	return resp, nil
}

var sayHallo_ClientInfo = client.ClientInfo{
	InterfaceName: "family.sayHallo",
	MethodNames:   []string{"Greet"},
	ConnectionInjectFunc: func(dubboCliRaw interface{}, conn *client.Connection) {
		dubboCli := dubboCliRaw.(*sayHalloImpl)
		dubboCli.conn = conn
	},
}

// sayHalloHandler is an implementation of the family.sayHallo service.
type sayHalloHandler interface {
	Greet(context.Context, *GreetRequest) (*GreetResponse, error)
}

func RegistersayHalloHandler(srv *server.Server, hdlr sayHalloHandler, opts ...server.ServiceOption) error {
	return srv.Register(hdlr, &sayHallo_ServiceInfo, opts...)
}

func SetProvidersayHallo(srv common.RPCService) {
	dubbo.SetProviderServiceWithInfo(srv, &sayHallo_ServiceInfo)
}

var sayHallo_ServiceInfo = server.ServiceInfo{
	InterfaceName: "family.sayHallo",
	ServiceType:   (*sayHalloHandler)(nil),
	Methods: []server.MethodInfo{
		{
			Name: "Greet",
			Type: constant.CallUnary,
			ReqInitFunc: func() interface{} {
				return new(GreetRequest)
			},
			MethodFunc: func(ctx context.Context, args []interface{}, handler interface{}) (interface{}, error) {
				req := args[0].(*GreetRequest)
				res, err := handler.(sayHalloHandler).Greet(ctx, req)
				if err != nil {
					return nil, err
				}
				return triple_protocol.NewResponse(res), nil
			},
		},
	},
}
